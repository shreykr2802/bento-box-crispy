[
    {
        "slug": "understanding-hoisting-and-closures-in-javascript",
        "title": "Understanding Hoisting and Closures in JavaScript",
        "description": "A comprehensive guide to understanding hoisting and closures in JavaScript.",
        "introduction": "In this blog post, we will delve into two important concepts in JavaScript: hoisting and closures. Understanding these concepts is crucial for mastering JavaScript.",
        "date": "18-06-2024",
        "mainImage": "./hoisting-closures.png",
        "tags": ["tech", "javascript", "hoisting", "closures"],
        "content": [
          {
            "slNo": "1",
            "heading": "What is Hoisting?",
            "html": "",
            "code": "console.log(x); // Output: undefined\nvar x = 5;\nconsole.log(x); // Output: 5",
            "image": ""
          },
          {
            "slNo": "2",
            "heading": "Hoisting of Functions",
            "html": "",
            "code": "hoistedFunction(); // Output: 'This function has been hoisted.'\n\nfunction hoistedFunction() {\n  console.log('This function has been hoisted.');\n}",
            "image": ""
          },
          {
            "slNo": "3",
            "heading": "Understanding Closures",
            "html": "",
            "code": "function outerFunction(outerVariable) {\n  return function innerFunction(innerVariable) {\n    console.log('Outer Variable: ' + outerVariable);\n    console.log('Inner Variable: ' + innerVariable);\n  };\n}\n\nconst newFunction = outerFunction('outside');\nnewFunction('inside');",
            "image": ""
          },
          {
            "slNo": "4",
            "heading": "Visualizing Closures",
            "html": "",
            "code": "",
            "image": "./closures-visualization.png"
          }
        ],
        "conclusion": "In this post, we explored the concepts of hoisting and closures in JavaScript. By understanding these concepts, you can write more efficient and bug-free code. Hoisting allows variable and function declarations to be moved to the top of their scope, while closures enable functions to access variables from an outer function scope even after the outer function has closed.",
        "artifacts": ["https://developer.mozilla.org/en-US/docs/Glossary/Hoisting", "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"]
      }
      
]
